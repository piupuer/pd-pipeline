// Copyright (c) 2019 PaddlePaddle Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.17.3
// source: pipeline_service.proto

package pp

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Tensor structure, consistent with PADDLE variable types.
// Descriptions of input and output data.
type Tensor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// VarType: INT64
	Int64Data []int64 `protobuf:"varint,1,rep,packed,name=int64_data,json=int64Data,proto3" json:"int64_data,omitempty"`
	// VarType: FP32, FP16
	FloatData []float32 `protobuf:"fixed32,2,rep,packed,name=float_data,json=floatData,proto3" json:"float_data,omitempty"`
	// VarType: INT32, INT16, INT8
	IntData []int32 `protobuf:"varint,3,rep,packed,name=int_data,json=intData,proto3" json:"int_data,omitempty"`
	// VarType: FP64
	Float64Data []float64 `protobuf:"fixed64,4,rep,packed,name=float64_data,json=float64Data,proto3" json:"float64_data,omitempty"`
	// VarType: BF16, UINT8
	Uint32Data []uint32 `protobuf:"varint,5,rep,packed,name=uint32_data,json=uint32Data,proto3" json:"uint32_data,omitempty"`
	// VarType: BOOL
	BoolData []bool `protobuf:"varint,6,rep,packed,name=bool_data,json=boolData,proto3" json:"bool_data,omitempty"`
	// (No support)VarType: COMPLEX64, 2x represents the real part, 2x+1
	// represents the imaginary part
	Complex64Data []float32 `protobuf:"fixed32,7,rep,packed,name=complex64_data,json=complex64Data,proto3" json:"complex64_data,omitempty"`
	// (No support)VarType: COMPLEX128, 2x represents the real part, 2x+1
	// represents the imaginary part
	Complex128Data []float64 `protobuf:"fixed64,8,rep,packed,name=complex128_data,json=complex128Data,proto3" json:"complex128_data,omitempty"`
	// VarType: STRING
	StrData []string `protobuf:"bytes,9,rep,name=str_data,json=strData,proto3" json:"str_data,omitempty"`
	// VarType: BYTES, is suitable for big data. No need to save data types and
	// dimensions
	// pack method: pack by BytesIO, saved by np.save
	// unpack method: load by np.load, unpack by BytesIO.
	ByteData []byte `protobuf:"bytes,10,opt,name=byte_data,json=byteData,proto3" json:"byte_data,omitempty"`
	// Element types:
	//   0 => INT64
	//   1 => FP32
	//   2 => INT32
	//   3 => FP64
	//   4 => INT16
	//   5 => FP16
	//   6 => BF16
	//   7 => UINT8
	//   8 => INT8
	//   9 => BOOL
	//  10 => COMPLEX64
	//  11 => COMPLEX128
	//  12 => STRING
	//  13 => BYTES
	ElemType int32 `protobuf:"varint,20,opt,name=elem_type,json=elemType,proto3" json:"elem_type,omitempty"`
	// Shape of the tensor, including batch dimensions.
	Shape []int32 `protobuf:"varint,21,rep,packed,name=shape,proto3" json:"shape,omitempty"`
	// Level of data(LOD), support variable length data, only for fetch tensor
	// currently.
	Lod []int32 `protobuf:"varint,22,rep,packed,name=lod,proto3" json:"lod,omitempty"`
	// Correspond to the variable 'name' in the model description prototxt.
	Name string `protobuf:"bytes,23,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Tensor) Reset() {
	*x = Tensor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tensor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tensor) ProtoMessage() {}

func (x *Tensor) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tensor.ProtoReflect.Descriptor instead.
func (*Tensor) Descriptor() ([]byte, []int) {
	return file_pipeline_service_proto_rawDescGZIP(), []int{0}
}

func (x *Tensor) GetInt64Data() []int64 {
	if x != nil {
		return x.Int64Data
	}
	return nil
}

func (x *Tensor) GetFloatData() []float32 {
	if x != nil {
		return x.FloatData
	}
	return nil
}

func (x *Tensor) GetIntData() []int32 {
	if x != nil {
		return x.IntData
	}
	return nil
}

func (x *Tensor) GetFloat64Data() []float64 {
	if x != nil {
		return x.Float64Data
	}
	return nil
}

func (x *Tensor) GetUint32Data() []uint32 {
	if x != nil {
		return x.Uint32Data
	}
	return nil
}

func (x *Tensor) GetBoolData() []bool {
	if x != nil {
		return x.BoolData
	}
	return nil
}

func (x *Tensor) GetComplex64Data() []float32 {
	if x != nil {
		return x.Complex64Data
	}
	return nil
}

func (x *Tensor) GetComplex128Data() []float64 {
	if x != nil {
		return x.Complex128Data
	}
	return nil
}

func (x *Tensor) GetStrData() []string {
	if x != nil {
		return x.StrData
	}
	return nil
}

func (x *Tensor) GetByteData() []byte {
	if x != nil {
		return x.ByteData
	}
	return nil
}

func (x *Tensor) GetElemType() int32 {
	if x != nil {
		return x.ElemType
	}
	return 0
}

func (x *Tensor) GetShape() []int32 {
	if x != nil {
		return x.Shape
	}
	return nil
}

func (x *Tensor) GetLod() []int32 {
	if x != nil {
		return x.Lod
	}
	return nil
}

func (x *Tensor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// The structure of the service request. The input data can be repeated string
// pairs or tensors.
type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The input data are repeated string pairs.
	// for examples. key is "words", value is the string of words.
	Key   []string `protobuf:"bytes,1,rep,name=key,proto3" json:"key,omitempty"`
	Value []string `protobuf:"bytes,2,rep,name=value,proto3" json:"value,omitempty"`
	// The input data are repeated tensors for complex data structures.
	// Becase tensors can save more data information and reduce the amount of data
	// transferred.
	Tensors []*Tensor `protobuf:"bytes,3,rep,name=tensors,proto3" json:"tensors,omitempty"`
	// The name field in the RESTful API
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// The method field in the RESTful API
	Method string `protobuf:"bytes,5,opt,name=method,proto3" json:"method,omitempty"`
	// For tracing requests and logs
	Logid int64 `protobuf:"varint,6,opt,name=logid,proto3" json:"logid,omitempty"`
	// For tracking sources
	Clientip string `protobuf:"bytes,7,opt,name=clientip,proto3" json:"clientip,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_pipeline_service_proto_rawDescGZIP(), []int{1}
}

func (x *Request) GetKey() []string {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Request) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Request) GetTensors() []*Tensor {
	if x != nil {
		return x.Tensors
	}
	return nil
}

func (x *Request) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Request) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *Request) GetLogid() int64 {
	if x != nil {
		return x.Logid
	}
	return 0
}

func (x *Request) GetClientip() string {
	if x != nil {
		return x.Clientip
	}
	return ""
}

// The structure of the service response. The output data can be repeated string
// pairs or tensors.
type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Error code
	ErrNo int32 `protobuf:"varint,1,opt,name=err_no,json=errNo,proto3" json:"err_no,omitempty"`
	// Error messages
	ErrMsg string `protobuf:"bytes,2,opt,name=err_msg,json=errMsg,proto3" json:"err_msg,omitempty"`
	// The results of string pairs
	Key   []string `protobuf:"bytes,3,rep,name=key,proto3" json:"key,omitempty"`
	Value []string `protobuf:"bytes,4,rep,name=value,proto3" json:"value,omitempty"`
	// The results of tensors
	Tensors []*Tensor `protobuf:"bytes,5,rep,name=tensors,proto3" json:"tensors,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_pipeline_service_proto_rawDescGZIP(), []int{2}
}

func (x *Response) GetErrNo() int32 {
	if x != nil {
		return x.ErrNo
	}
	return 0
}

func (x *Response) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

func (x *Response) GetKey() []string {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Response) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Response) GetTensors() []*Tensor {
	if x != nil {
		return x.Tensors
	}
	return nil
}

var File_pipeline_service_proto protoreflect.FileDescriptor

var file_pipeline_service_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x25, 0x62, 0x61, 0x69, 0x64, 0x75, 0x2e,
	0x70, 0x61, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x22,
	0xa3, 0x03, 0x0a, 0x06, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x52, 0x09, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x01, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x36, 0x34, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x75, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x08, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x36,
	0x34, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0d, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x78, 0x36, 0x34, 0x44, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x31, 0x32, 0x38, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x01, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x31, 0x32, 0x38,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x62, 0x79, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09,
	0x65, 0x6c, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x65, 0x6c, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61,
	0x70, 0x65, 0x18, 0x15, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x64, 0x18, 0x16, 0x20, 0x03, 0x28, 0x05, 0x52, 0x03, 0x6c, 0x6f,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xd8, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x47, 0x0a, 0x07, 0x74, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x61, 0x69,
	0x64, 0x75, 0x2e, 0x70, 0x61, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e,
	0x67, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x6e, 0x67, 0x2e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x07, 0x74, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c,
	0x6f, 0x67, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x70,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x70,
	0x22, 0xab, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a,
	0x06, 0x65, 0x72, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x4e, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x47, 0x0a, 0x07, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x61, 0x69, 0x64, 0x75, 0x2e, 0x70,
	0x61, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x54,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x07, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x32, 0x81,
	0x01, 0x0a, 0x0f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x6e, 0x0a, 0x09, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x2e, 0x2e, 0x62, 0x61, 0x69, 0x64, 0x75, 0x2e, 0x70, 0x61, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2f, 0x2e, 0x62, 0x61, 0x69, 0x64, 0x75, 0x2e, 0x70, 0x61, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x1c, 0x5a, 0x1a, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x64, 0x2d, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x70, 0x70,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pipeline_service_proto_rawDescOnce sync.Once
	file_pipeline_service_proto_rawDescData = file_pipeline_service_proto_rawDesc
)

func file_pipeline_service_proto_rawDescGZIP() []byte {
	file_pipeline_service_proto_rawDescOnce.Do(func() {
		file_pipeline_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_pipeline_service_proto_rawDescData)
	})
	return file_pipeline_service_proto_rawDescData
}

var file_pipeline_service_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_pipeline_service_proto_goTypes = []interface{}{
	(*Tensor)(nil),   // 0: baidu.paddle_serving.pipeline_serving.Tensor
	(*Request)(nil),  // 1: baidu.paddle_serving.pipeline_serving.Request
	(*Response)(nil), // 2: baidu.paddle_serving.pipeline_serving.Response
}
var file_pipeline_service_proto_depIdxs = []int32{
	0, // 0: baidu.paddle_serving.pipeline_serving.Request.tensors:type_name -> baidu.paddle_serving.pipeline_serving.Tensor
	0, // 1: baidu.paddle_serving.pipeline_serving.Response.tensors:type_name -> baidu.paddle_serving.pipeline_serving.Tensor
	1, // 2: baidu.paddle_serving.pipeline_serving.PipelineService.inference:input_type -> baidu.paddle_serving.pipeline_serving.Request
	2, // 3: baidu.paddle_serving.pipeline_serving.PipelineService.inference:output_type -> baidu.paddle_serving.pipeline_serving.Response
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_pipeline_service_proto_init() }
func file_pipeline_service_proto_init() {
	if File_pipeline_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pipeline_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tensor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pipeline_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pipeline_service_proto_goTypes,
		DependencyIndexes: file_pipeline_service_proto_depIdxs,
		MessageInfos:      file_pipeline_service_proto_msgTypes,
	}.Build()
	File_pipeline_service_proto = out.File
	file_pipeline_service_proto_rawDesc = nil
	file_pipeline_service_proto_goTypes = nil
	file_pipeline_service_proto_depIdxs = nil
}
